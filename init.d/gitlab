#! /bin/bash

# GITLAB
# Maintainer: @randx
# App Version: 5.1

### BEGIN INIT INFO
# Provides:          gitlab
# Required-Start:    $local_fs $remote_fs $network $syslog redis-server
# Required-Stop:     $local_fs $remote_fs $network $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: GitLab git repository management
# Description:       GitLab git repository management
### END INIT INFO


APP_ROOT="/home/git/gitlab"
DAEMON_OPTS="-C $APP_ROOT/config/puma.rb -e production"
PID_PATH="$APP_ROOT/tmp/pids"
WEB_SERVER_PID="$PID_PATH/puma.pid"
SIDEKIQ_PID="$PID_PATH/sidekiq.pid"
STOP_SIDEKIQ="RAILS_END=production bundle exec sidekiqctl stop $SIDEKIQ_PID"
START_SIDEKIQ="RAILS_ENV=production bundle exec rake sidekiq:start"
NAME="gitlab"
DESC="Gitlab service"
RUN_AS="git"

# Calling check_pid will change these
PID=0
STATUS=0
SPID=0
SSTATUS=0
check_pid(){
  if [ -f $WEB_SERVER_PID ]; then
    PID=`cat $WEB_SERVER_PID`
    if ! test -d /proc/$PID; then
      PID=0
    fi
  fi
  if [ -f $SIDEKIQ_PID ]; then
    SPID=`cat $SIDEKIQ_PID`
    if ! test -d /proc/$SPID; then
      SPID=0
    fi
  fi
}

web_server_running() {
  test "$PID" -ne 0
  return $?
}

sidekiq_running() {
  test "$SPID" -ne 0
  return $?
}

start() {
  cd $APP_ROOT
  check_pid
  if web_server_running || sidekiq_running; then
    # Program is running, exit with error code 1.
    echo "Error! $DESC $NAME is currently running!"
    exit 1
  else
    sudo -u $RUN_AS -H bash -l -c "RAILS_ENV=production bundle exec puma $DAEMON_OPTS"
    sudo -u $RUN_AS -H bash -l -c "mkdir -p $PID_PATH && $START_SIDEKIQ  > /dev/null  2>&1 &"
    echo "$DESC started"
  fi
}

stop() {
  cd $APP_ROOT
  check_pid
  if ! web_server_running && ! sidekiq_running; then
    echo "$DESC not started!"
    exit 1
  fi
  if web_server_running; then
    ## Puma is running, stop it.
    kill -QUIT $PID
    #rm -f "$WEB_SERVER_PID"
  fi
  if sidekiq_running; then
    ## Sidekiq is running, stop it.
    sudo -u $RUN_AS -H bash -l -c "$STOP_SIDEKIQ >/dev/null 2>&1 &"
    #rm -f "$SIDEKIQ_PID"
  fi

  echo "$DESC stopped"
}

restart() {
  cd $APP_ROOT
  check_pid
  if ! web_server_running || ! sidekiq_running; then
    echo "$DESC is not running."
    exit 1
  fi
  echo "Restarting $DESC..."
  # puma USR2 -> restart
  kill -USR2 $PID
  # sidekiq doesn't know howto restart -> stop + start
  # ps. sidekiq doesn't handle int/term very nicely...
  sudo -u $RUN_AS -H bash -l -c "$STOP_SIDEKIQ >/dev/null 2>&1 &"
  sudo -u $RUN_AS -H bash -l -c "mkdir -p $PID_PATH && $START_SIDEKIQ"
  echo "$DESC restarted."
}

reload() {
  cd $APP_ROOT
  check_pid
  if ! web_server_running || ! sidekiq_running; then
    echo "$DESC is not running."
    exit 1
  fi
  echo -n "Reloading $NAME configuration: "
  # PR into puma and sidekiq for chaning these into HUP
  # puma, USR" -> restart
  kill -USR2 $PID
  # sidekiq, USR2 -> reload
  kill -USR2 $SPID
  echo "done."
}

status() {
  cd $APP_ROOT
  check_pid
  err=0
  if web_server_running; then
    echo "$DESC / Puma with PID $PID is running."
  else
    echo "$DESC / Puma is not running."
    err=1
  fi
  if sidekiq_running; then
    echo "$DESC / Sidekiq with PID $SPID is running."
  else
    echo "$DESC / Sidekiq is not running."
    err=1
  fi
  exit $err
}

## Check to see if we are running as root first.
## Found at http://www.cyberciti.biz/tips/shell-root-user-check-script.html
if [ "$(id -u)" != "0" ]; then
    echo "This script must be run as root"
    exit 1
fi

case "$1" in
  start)
        start
        ;;
  stop)
        stop
        ;;
  restart)
        restart
        ;;
  reload|force-reload)
        reload
        ;;
  status)
        status
        ;;
  *)
        echo "Usage: sudo service gitlab {start|stop|restart|reload}" >&2
        exit 1
        ;;
esac

exit 0
